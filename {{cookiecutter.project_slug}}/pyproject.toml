[tool.poetry]
name = "{{cookiecutter-project-slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.open_source_license}}"
readme = "README.md"
packages = [{include = "{{cookiecutter.project_slug}}"}]

[tool.poetry.dependencies]
python = "{{ cookiecutter.python_version }}"

[tool.poetry.group.dev.dependencies]
taskipy = "*"
pytest = "*"
pytest-cov = "*"
ipdb = "*"
ruff = "*"
pycodestyle = "*"
flake8-comprehensions = "*"
flake8-bugbear = "*"
pyupgrade = "*"
pyflakes = "*"
mccabe = "*"
isort = "*"
blue = "*"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = ['.venv', '.ruff_cache', '.git']
line-length = {{ cookiecutter.__line_width }}
indent-width = 4
select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "C4",   # flake8-comprehensions
    "E",    # pycodestyle errors
    "ERA",  # eradicate
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "PL",   # Pylint
    "RET",  # flake8-return
    "S",    # flake8-bandit
    "T10",  # flake8-debugger
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "C90",  # mccabe
]
ignore = ["A003"]
target-version = "{{ cookiecutter.target_version }}"

[tool.ruff.lint]
select = ["D"]
ignore = [
    "D100", # undocumented-public-module
    "D104"  # undocumented-public-package
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings.

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
"**/{tests,docs}/*" = ["E402"]
"tests/**" = ["ARG", "S"]

[tool.isort]
profile = "black"

[tool.ruff.format]
exclude = ["*.pyi"]
quote-style = "single"

[tool.pytest.ini_options]
pythonpath = "."

[tool.taskipy.tasks]
lint = 'ruff . && blue --check . --diff'
format = 'blue .  && isort .'
pre_test = 'task format'
test = 'pytest -s -x --cov={{cookiecutter.project_slug}} -vv'
post_test = 'coverage html'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
